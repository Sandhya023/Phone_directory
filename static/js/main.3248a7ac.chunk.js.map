{"version":3,"sources":["Components/ContactList/index.js","Components/Header/index.js","Containers/Wrapper.js","Components/ContactForm/index.js","App.js","serviceWorker.js","index.js"],"names":["FontAwesome","require","contacts","props","contactList","list","map","contact","id","react_default","a","createElement","key","name","phone","onClick","onDelete","className","header","children","Main","Header","Link","to","Wrapper_FontAwesome","ContactList","this","deleteContact","Component","ContactForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeName","event","setState","target","value","onChangePhone","addContact","preventDefault","state","isNaN","error","errorMessage","react","onSubmit","htmlFor","type","onChange","required","PureComponent","App","newContacts","toConsumableArray","push","length","history","filter","_this2","Switch","Route","path","render","Components_ContactForm","Wrapper","withRouter","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3248a7ac.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nvar FontAwesome = require('react-fontawesome');\n\nconst contacts = props => {\n  const contactList = props.list.map((contact, id) => {\n    return (\n      <tr key={id}>\n        <td>{contact.name}</td>\n        <td>{contact.phone}</td>\n        <td>\n          <button onClick={() => props.onDelete(contact.id)} className=\"Contacts_delete\"><FontAwesome name='minus' />{' '}Delete</button>\n        </td>\n      </tr>\n    );\n  });\n  return (\n    <table className=\"Contacts_table\">\n      <tbody>\n        <tr>\n          <th><u className=\"header_ul\">NAME</u></th>\n          <th><u className=\"header_ul\">PHONE</u></th>\n        </tr>\n        {contactList}\n      </tbody>\n    </table>\n  );\n};\n\nexport default contacts;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst header = props => {\n  return <header className=\"header\">{props.children}</header>;\n};\n\nexport default header;\n","import React, { Component } from \"react\";\nimport Contacts from \"../Components/ContactList/index\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../Components/Header/index\";\nimport \"./main.css\";\nvar FontAwesome = require('react-fontawesome');\n\nclass Main extends Component {\n  render() {\n    return (\n      <div className=\"Main\">\n        <Header><u className=\"header-ul\">Phone Directory {' '} </u></Header>\n        <div className=\"Main_container\">\n          <Link to=\"/add\" className=\"Main_add\">\n            <FontAwesome name='plus' /> {\" \"}ADD\n          </Link>\n          <Contacts\n            list={this.props.contacts}\n            onDelete={this.props.deleteContact}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { PureComponent, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../Header/index\";\n\nimport \"./style.css\";\n\nclass ContactForm extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      phone: \"\",\n      error: false,\n      errorMessage: \"\"\n    };\n  }\n  onChangeName = event => {\n    this.setState({\n      name: event.target.value\n    });\n  };\n  onChangePhone = event => {\n    this.setState({\n      phone: event.target.value\n    });\n  };\n  addContact = event => {\n    event.preventDefault();\n    const phone = this.state.phone;\n    if (isNaN(phone)) {\n      this.setState({\n        error: true,\n        errorMessage: \"Enter a valid Name or Phone Number\"\n      });\n    } else {\n      this.props.addContact({\n        name: this.state.name,\n        phone: this.state.phone\n      });\n    }\n  };\n  render() {\n    let errorMessage;\n    if (this.state.error) {\n      errorMessage = this.state.errorMessage;\n    }\n    return (\n      <Fragment>\n        <Header><u className=\"header_ul\">Mini Phone Directory</u></Header>\n        <div className=\"AddContact_container\">\n          <Link to=\"/\" className=\"form_link\">\n            <u className=\"header_ul\">Back</u>\n          </Link>\n          <form className=\"AddContact_form\" onSubmit={this.addContact}>\n            <div className=\"form_control\">\n              <label htmlFor=\"name\">Name: </label>\n              <input\n                className=\"form_input\"\n                type=\"text\"\n                id=\"name\"\n                onChange={this.onChangeName}\n                required\n              />\n            </div>\n            <div className=\"form_control\">\n              <label htmlFor=\"phone\">Phone: </label>\n              <input\n                className=\"form_input\"\n                type=\"text\"\n                id=\"phone\"\n                onChange={this.onChangePhone}\n                required\n              />\n            </div>\n            <h4 className=\"form_error\">{errorMessage}</h4>\n            <hr />\n            <h3><u className=\"header_ul\">Contact to be added:</u></h3>\n            <div className=\"form_display\">\n              Name: <span>{this.state.name}</span>\n            </div>\n            <div className=\"form_display\">\n              Phone: <span>{this.state.phone}</span>\n            </div>\n            <button type=\"submit\" className=\"form_add\">\n              ADD\n            </button>\n          </form>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport Wrapper from \"./Containers/Wrapper\";\nimport ContactForm from \"./Components/ContactForm/index\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: []\n    };\n  }\n  addContact = contact => {\n    const { name, phone } = contact;\n    const newContacts = [...this.state.contacts];\n    newContacts.push({ name, phone, id: newContacts.length + 1 });\n    this.setState(\n      {\n        contacts: newContacts\n      },\n      () => {\n        this.props.history.push(\"/\");\n      }\n    );\n  };\n  deleteContact = id => {\n    const newContacts = this.state.contacts.filter(\n      contact => contact.id !== id\n    );\n    this.setState({\n      contacts: newContacts\n    });\n  };\n  render() {\n    return (\n      <Switch>\n        <Route\n          path=\"/add\"\n          render={() => <ContactForm addContact={this.addContact} />}\n        />\n        <Route\n          path=\"/\"\n          render={() => (\n            <Wrapper\n              contacts={this.state.contacts}\n              deleteContact={this.deleteContact}\n            />\n          )}\n        />\n      </Switch>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}